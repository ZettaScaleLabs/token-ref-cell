//! Errors.

use core::fmt;

/// Error returned by [`TokenCell::try_borrow`](crate::TokenCell::try_borrow).
#[derive(Debug)]
pub struct BorrowError;

impl fmt::Display for BorrowError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "already mutably borrowed")
    }
}

#[cfg(feature = "std")]
impl std::error::Error for BorrowError {}

/// Error returned by [`TokenCell::try_borrow_mut`](crate::TokenCell::try_borrow_mut).
#[derive(Debug)]
pub struct BorrowMutError;

impl fmt::Display for BorrowMutError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "already borrowed")
    }
}

#[cfg(feature = "std")]
impl std::error::Error for BorrowMutError {}

/// Error returned when singleton token generated by [`token`](crate::singleton_token!)
/// macro is already initialized.
#[derive(Debug)]
pub struct AlreadyInitialized;

impl fmt::Display for AlreadyInitialized {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "already initialized")
    }
}

#[cfg(feature = "std")]
impl std::error::Error for AlreadyInitialized {}
